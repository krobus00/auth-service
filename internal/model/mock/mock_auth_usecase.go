// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/krobus00/auth-service/internal/model (interfaces: AuthUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/krobus00/auth-service/internal/model"
)

// MockAuthUsecase is a mock of AuthUsecase interface.
type MockAuthUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUsecaseMockRecorder
}

// MockAuthUsecaseMockRecorder is the mock recorder for MockAuthUsecase.
type MockAuthUsecaseMockRecorder struct {
	mock *MockAuthUsecase
}

// NewMockAuthUsecase creates a new mock instance.
func NewMockAuthUsecase(ctrl *gomock.Controller) *MockAuthUsecase {
	mock := &MockAuthUsecase{ctrl: ctrl}
	mock.recorder = &MockAuthUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUsecase) EXPECT() *MockAuthUsecaseMockRecorder {
	return m.recorder
}

// HasAccess mocks base method.
func (m *MockAuthUsecase) HasAccess(arg0 context.Context, arg1 *model.HasAccessPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasAccess", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HasAccess indicates an expected call of HasAccess.
func (mr *MockAuthUsecaseMockRecorder) HasAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasAccess", reflect.TypeOf((*MockAuthUsecase)(nil).HasAccess), arg0, arg1)
}

// InjectUserGroupRepo mocks base method.
func (m *MockAuthUsecase) InjectUserGroupRepo(arg0 model.UserGroupRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectUserGroupRepo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectUserGroupRepo indicates an expected call of InjectUserGroupRepo.
func (mr *MockAuthUsecaseMockRecorder) InjectUserGroupRepo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectUserGroupRepo", reflect.TypeOf((*MockAuthUsecase)(nil).InjectUserGroupRepo), arg0)
}
