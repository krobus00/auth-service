// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/krobus00/auth-service/internal/model (interfaces: GroupPermissionRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	redis "github.com/go-redis/redis/v8"
	gomock "github.com/golang/mock/gomock"
	model "github.com/krobus00/auth-service/internal/model"
	gorm "gorm.io/gorm"
)

// MockGroupPermissionRepository is a mock of GroupPermissionRepository interface.
type MockGroupPermissionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGroupPermissionRepositoryMockRecorder
}

// MockGroupPermissionRepositoryMockRecorder is the mock recorder for MockGroupPermissionRepository.
type MockGroupPermissionRepositoryMockRecorder struct {
	mock *MockGroupPermissionRepository
}

// NewMockGroupPermissionRepository creates a new mock instance.
func NewMockGroupPermissionRepository(ctrl *gomock.Controller) *MockGroupPermissionRepository {
	mock := &MockGroupPermissionRepository{ctrl: ctrl}
	mock.recorder = &MockGroupPermissionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupPermissionRepository) EXPECT() *MockGroupPermissionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGroupPermissionRepository) Create(arg0 context.Context, arg1 *model.GroupPermission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockGroupPermissionRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGroupPermissionRepository)(nil).Create), arg0, arg1)
}

// DeleteByGroupIDAndPermissionID mocks base method.
func (m *MockGroupPermissionRepository) DeleteByGroupIDAndPermissionID(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByGroupIDAndPermissionID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByGroupIDAndPermissionID indicates an expected call of DeleteByGroupIDAndPermissionID.
func (mr *MockGroupPermissionRepositoryMockRecorder) DeleteByGroupIDAndPermissionID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByGroupIDAndPermissionID", reflect.TypeOf((*MockGroupPermissionRepository)(nil).DeleteByGroupIDAndPermissionID), arg0, arg1, arg2)
}

// FindByGroupIDAndPermissionID mocks base method.
func (m *MockGroupPermissionRepository) FindByGroupIDAndPermissionID(arg0 context.Context, arg1, arg2 string) (*model.GroupPermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByGroupIDAndPermissionID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.GroupPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByGroupIDAndPermissionID indicates an expected call of FindByGroupIDAndPermissionID.
func (mr *MockGroupPermissionRepositoryMockRecorder) FindByGroupIDAndPermissionID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByGroupIDAndPermissionID", reflect.TypeOf((*MockGroupPermissionRepository)(nil).FindByGroupIDAndPermissionID), arg0, arg1, arg2)
}

// InjectDB mocks base method.
func (m *MockGroupPermissionRepository) InjectDB(arg0 *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectDB", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectDB indicates an expected call of InjectDB.
func (mr *MockGroupPermissionRepositoryMockRecorder) InjectDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectDB", reflect.TypeOf((*MockGroupPermissionRepository)(nil).InjectDB), arg0)
}

// InjectRedisClient mocks base method.
func (m *MockGroupPermissionRepository) InjectRedisClient(arg0 *redis.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectRedisClient", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectRedisClient indicates an expected call of InjectRedisClient.
func (mr *MockGroupPermissionRepositoryMockRecorder) InjectRedisClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectRedisClient", reflect.TypeOf((*MockGroupPermissionRepository)(nil).InjectRedisClient), arg0)
}
