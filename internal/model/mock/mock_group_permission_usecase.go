// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/krobus00/auth-service/internal/model (interfaces: GroupPermissionUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/krobus00/auth-service/internal/model"
)

// MockGroupPermissionUsecase is a mock of GroupPermissionUsecase interface.
type MockGroupPermissionUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockGroupPermissionUsecaseMockRecorder
}

// MockGroupPermissionUsecaseMockRecorder is the mock recorder for MockGroupPermissionUsecase.
type MockGroupPermissionUsecaseMockRecorder struct {
	mock *MockGroupPermissionUsecase
}

// NewMockGroupPermissionUsecase creates a new mock instance.
func NewMockGroupPermissionUsecase(ctrl *gomock.Controller) *MockGroupPermissionUsecase {
	mock := &MockGroupPermissionUsecase{ctrl: ctrl}
	mock.recorder = &MockGroupPermissionUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupPermissionUsecase) EXPECT() *MockGroupPermissionUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGroupPermissionUsecase) Create(arg0 context.Context, arg1 *model.CreateGroupPermissionPayload) (*model.GroupPermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*model.GroupPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGroupPermissionUsecaseMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGroupPermissionUsecase)(nil).Create), arg0, arg1)
}

// DeleteByGroupIDAndPermissionID mocks base method.
func (m *MockGroupPermissionUsecase) DeleteByGroupIDAndPermissionID(arg0 context.Context, arg1 *model.DeleteGroupPermissionPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByGroupIDAndPermissionID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByGroupIDAndPermissionID indicates an expected call of DeleteByGroupIDAndPermissionID.
func (mr *MockGroupPermissionUsecaseMockRecorder) DeleteByGroupIDAndPermissionID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByGroupIDAndPermissionID", reflect.TypeOf((*MockGroupPermissionUsecase)(nil).DeleteByGroupIDAndPermissionID), arg0, arg1)
}

// FindByGroupIDAndPermissionID mocks base method.
func (m *MockGroupPermissionUsecase) FindByGroupIDAndPermissionID(arg0 context.Context, arg1 *model.FindGroupPermissionPayload) (*model.GroupPermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByGroupIDAndPermissionID", arg0, arg1)
	ret0, _ := ret[0].(*model.GroupPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByGroupIDAndPermissionID indicates an expected call of FindByGroupIDAndPermissionID.
func (mr *MockGroupPermissionUsecaseMockRecorder) FindByGroupIDAndPermissionID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByGroupIDAndPermissionID", reflect.TypeOf((*MockGroupPermissionUsecase)(nil).FindByGroupIDAndPermissionID), arg0, arg1)
}

// InjectAuthUsecase mocks base method.
func (m *MockGroupPermissionUsecase) InjectAuthUsecase(arg0 model.AuthUsecase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectAuthUsecase", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectAuthUsecase indicates an expected call of InjectAuthUsecase.
func (mr *MockGroupPermissionUsecaseMockRecorder) InjectAuthUsecase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectAuthUsecase", reflect.TypeOf((*MockGroupPermissionUsecase)(nil).InjectAuthUsecase), arg0)
}

// InjectGroupPermissionRepo mocks base method.
func (m *MockGroupPermissionUsecase) InjectGroupPermissionRepo(arg0 model.GroupPermissionRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectGroupPermissionRepo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectGroupPermissionRepo indicates an expected call of InjectGroupPermissionRepo.
func (mr *MockGroupPermissionUsecaseMockRecorder) InjectGroupPermissionRepo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectGroupPermissionRepo", reflect.TypeOf((*MockGroupPermissionUsecase)(nil).InjectGroupPermissionRepo), arg0)
}

// InjectGroupRepo mocks base method.
func (m *MockGroupPermissionUsecase) InjectGroupRepo(arg0 model.GroupRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectGroupRepo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectGroupRepo indicates an expected call of InjectGroupRepo.
func (mr *MockGroupPermissionUsecaseMockRecorder) InjectGroupRepo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectGroupRepo", reflect.TypeOf((*MockGroupPermissionUsecase)(nil).InjectGroupRepo), arg0)
}

// InjectPermisisonRepo mocks base method.
func (m *MockGroupPermissionUsecase) InjectPermisisonRepo(arg0 model.PermissionRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectPermisisonRepo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectPermisisonRepo indicates an expected call of InjectPermisisonRepo.
func (mr *MockGroupPermissionUsecaseMockRecorder) InjectPermisisonRepo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectPermisisonRepo", reflect.TypeOf((*MockGroupPermissionUsecase)(nil).InjectPermisisonRepo), arg0)
}
