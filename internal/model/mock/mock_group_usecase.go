// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/krobus00/auth-service/internal/model (interfaces: GroupUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/krobus00/auth-service/internal/model"
)

// MockGroupUsecase is a mock of GroupUsecase interface.
type MockGroupUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockGroupUsecaseMockRecorder
}

// MockGroupUsecaseMockRecorder is the mock recorder for MockGroupUsecase.
type MockGroupUsecaseMockRecorder struct {
	mock *MockGroupUsecase
}

// NewMockGroupUsecase creates a new mock instance.
func NewMockGroupUsecase(ctrl *gomock.Controller) *MockGroupUsecase {
	mock := &MockGroupUsecase{ctrl: ctrl}
	mock.recorder = &MockGroupUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupUsecase) EXPECT() *MockGroupUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGroupUsecase) Create(arg0 context.Context, arg1 *model.CreateGroupPayload) (*model.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*model.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGroupUsecaseMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGroupUsecase)(nil).Create), arg0, arg1)
}

// DeleteByID mocks base method.
func (m *MockGroupUsecase) DeleteByID(arg0 context.Context, arg1 *model.DeleteGroupByIDPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockGroupUsecaseMockRecorder) DeleteByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockGroupUsecase)(nil).DeleteByID), arg0, arg1)
}

// FindByID mocks base method.
func (m *MockGroupUsecase) FindByID(arg0 context.Context, arg1 *model.FindGroupByIDPayload) (*model.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*model.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockGroupUsecaseMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockGroupUsecase)(nil).FindByID), arg0, arg1)
}

// FindByName mocks base method.
func (m *MockGroupUsecase) FindByName(arg0 context.Context, arg1 *model.FindGroupByNamePayload) (*model.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", arg0, arg1)
	ret0, _ := ret[0].(*model.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockGroupUsecaseMockRecorder) FindByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockGroupUsecase)(nil).FindByName), arg0, arg1)
}

// InjectAuthUsecase mocks base method.
func (m *MockGroupUsecase) InjectAuthUsecase(arg0 model.AuthUsecase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectAuthUsecase", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectAuthUsecase indicates an expected call of InjectAuthUsecase.
func (mr *MockGroupUsecaseMockRecorder) InjectAuthUsecase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectAuthUsecase", reflect.TypeOf((*MockGroupUsecase)(nil).InjectAuthUsecase), arg0)
}

// InjectGroupRepo mocks base method.
func (m *MockGroupUsecase) InjectGroupRepo(arg0 model.GroupRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectGroupRepo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectGroupRepo indicates an expected call of InjectGroupRepo.
func (mr *MockGroupUsecaseMockRecorder) InjectGroupRepo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectGroupRepo", reflect.TypeOf((*MockGroupUsecase)(nil).InjectGroupRepo), arg0)
}

// Update mocks base method.
func (m *MockGroupUsecase) Update(arg0 context.Context, arg1 *model.UpdateGroupPayload) (*model.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*model.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockGroupUsecaseMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGroupUsecase)(nil).Update), arg0, arg1)
}
