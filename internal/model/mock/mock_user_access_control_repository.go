// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/krobus00/auth-service/internal/model (interfaces: UserAccessControlRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	redis "github.com/go-redis/redis/v8"
	gomock "github.com/golang/mock/gomock"
	model "github.com/krobus00/auth-service/internal/model"
	gorm "gorm.io/gorm"
)

// MockUserAccessControlRepository is a mock of UserAccessControlRepository interface.
type MockUserAccessControlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserAccessControlRepositoryMockRecorder
}

// MockUserAccessControlRepositoryMockRecorder is the mock recorder for MockUserAccessControlRepository.
type MockUserAccessControlRepositoryMockRecorder struct {
	mock *MockUserAccessControlRepository
}

// NewMockUserAccessControlRepository creates a new mock instance.
func NewMockUserAccessControlRepository(ctrl *gomock.Controller) *MockUserAccessControlRepository {
	mock := &MockUserAccessControlRepository{ctrl: ctrl}
	mock.recorder = &MockUserAccessControlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAccessControlRepository) EXPECT() *MockUserAccessControlRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserAccessControlRepository) Create(arg0 context.Context, arg1 *model.UserAccessControl) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserAccessControlRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserAccessControlRepository)(nil).Create), arg0, arg1)
}

// HasAccess mocks base method.
func (m *MockUserAccessControlRepository) HasAccess(arg0 context.Context, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasAccess", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HasAccess indicates an expected call of HasAccess.
func (mr *MockUserAccessControlRepositoryMockRecorder) HasAccess(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasAccess", reflect.TypeOf((*MockUserAccessControlRepository)(nil).HasAccess), arg0, arg1, arg2)
}

// InjectDB mocks base method.
func (m *MockUserAccessControlRepository) InjectDB(arg0 *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectDB", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectDB indicates an expected call of InjectDB.
func (mr *MockUserAccessControlRepositoryMockRecorder) InjectDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectDB", reflect.TypeOf((*MockUserAccessControlRepository)(nil).InjectDB), arg0)
}

// InjectRedisClient mocks base method.
func (m *MockUserAccessControlRepository) InjectRedisClient(arg0 *redis.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectRedisClient", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectRedisClient indicates an expected call of InjectRedisClient.
func (mr *MockUserAccessControlRepositoryMockRecorder) InjectRedisClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectRedisClient", reflect.TypeOf((*MockUserAccessControlRepository)(nil).InjectRedisClient), arg0)
}

// Revoke mocks base method.
func (m *MockUserAccessControlRepository) Revoke(arg0 context.Context, arg1 *model.UserAccessControl) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Revoke indicates an expected call of Revoke.
func (mr *MockUserAccessControlRepositoryMockRecorder) Revoke(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockUserAccessControlRepository)(nil).Revoke), arg0, arg1)
}
