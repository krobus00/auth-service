// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/krobus00/auth-service/internal/model (interfaces: UserGroupRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	redis "github.com/go-redis/redis/v8"
	gomock "github.com/golang/mock/gomock"
	model "github.com/krobus00/auth-service/internal/model"
	gorm "gorm.io/gorm"
)

// MockUserGroupRepository is a mock of UserGroupRepository interface.
type MockUserGroupRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserGroupRepositoryMockRecorder
}

// MockUserGroupRepositoryMockRecorder is the mock recorder for MockUserGroupRepository.
type MockUserGroupRepositoryMockRecorder struct {
	mock *MockUserGroupRepository
}

// NewMockUserGroupRepository creates a new mock instance.
func NewMockUserGroupRepository(ctrl *gomock.Controller) *MockUserGroupRepository {
	mock := &MockUserGroupRepository{ctrl: ctrl}
	mock.recorder = &MockUserGroupRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserGroupRepository) EXPECT() *MockUserGroupRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserGroupRepository) Create(arg0 context.Context, arg1 *model.UserGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserGroupRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserGroupRepository)(nil).Create), arg0, arg1)
}

// DeleteByUserIDAndGroupID mocks base method.
func (m *MockUserGroupRepository) DeleteByUserIDAndGroupID(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUserIDAndGroupID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserIDAndGroupID indicates an expected call of DeleteByUserIDAndGroupID.
func (mr *MockUserGroupRepositoryMockRecorder) DeleteByUserIDAndGroupID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserIDAndGroupID", reflect.TypeOf((*MockUserGroupRepository)(nil).DeleteByUserIDAndGroupID), arg0, arg1, arg2)
}

// FindByUserID mocks base method.
func (m *MockUserGroupRepository) FindByUserID(arg0 context.Context, arg1 string) ([]*model.UserGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", arg0, arg1)
	ret0, _ := ret[0].([]*model.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockUserGroupRepositoryMockRecorder) FindByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockUserGroupRepository)(nil).FindByUserID), arg0, arg1)
}

// FindByUserIDAndGroupID mocks base method.
func (m *MockUserGroupRepository) FindByUserIDAndGroupID(arg0 context.Context, arg1, arg2 string) (*model.UserGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserIDAndGroupID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserIDAndGroupID indicates an expected call of FindByUserIDAndGroupID.
func (mr *MockUserGroupRepositoryMockRecorder) FindByUserIDAndGroupID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserIDAndGroupID", reflect.TypeOf((*MockUserGroupRepository)(nil).FindByUserIDAndGroupID), arg0, arg1, arg2)
}

// HasPermission mocks base method.
func (m *MockUserGroupRepository) HasPermission(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPermission", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasPermission indicates an expected call of HasPermission.
func (mr *MockUserGroupRepositoryMockRecorder) HasPermission(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPermission", reflect.TypeOf((*MockUserGroupRepository)(nil).HasPermission), arg0, arg1, arg2)
}

// InjectDB mocks base method.
func (m *MockUserGroupRepository) InjectDB(arg0 *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectDB", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectDB indicates an expected call of InjectDB.
func (mr *MockUserGroupRepositoryMockRecorder) InjectDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectDB", reflect.TypeOf((*MockUserGroupRepository)(nil).InjectDB), arg0)
}

// InjectRedisClient mocks base method.
func (m *MockUserGroupRepository) InjectRedisClient(arg0 *redis.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectRedisClient", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectRedisClient indicates an expected call of InjectRedisClient.
func (mr *MockUserGroupRepositoryMockRecorder) InjectRedisClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectRedisClient", reflect.TypeOf((*MockUserGroupRepository)(nil).InjectRedisClient), arg0)
}
