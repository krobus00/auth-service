// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/krobus00/auth-service/internal/model (interfaces: UserGroupUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/krobus00/auth-service/internal/model"
)

// MockUserGroupUsecase is a mock of UserGroupUsecase interface.
type MockUserGroupUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserGroupUsecaseMockRecorder
}

// MockUserGroupUsecaseMockRecorder is the mock recorder for MockUserGroupUsecase.
type MockUserGroupUsecaseMockRecorder struct {
	mock *MockUserGroupUsecase
}

// NewMockUserGroupUsecase creates a new mock instance.
func NewMockUserGroupUsecase(ctrl *gomock.Controller) *MockUserGroupUsecase {
	mock := &MockUserGroupUsecase{ctrl: ctrl}
	mock.recorder = &MockUserGroupUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserGroupUsecase) EXPECT() *MockUserGroupUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserGroupUsecase) Create(arg0 context.Context, arg1 *model.CreateUserGroupPayload) (*model.UserGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*model.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserGroupUsecaseMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserGroupUsecase)(nil).Create), arg0, arg1)
}

// DeleteByUserIDAndGroupID mocks base method.
func (m *MockUserGroupUsecase) DeleteByUserIDAndGroupID(arg0 context.Context, arg1 *model.DeleteUserGroupPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUserIDAndGroupID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserIDAndGroupID indicates an expected call of DeleteByUserIDAndGroupID.
func (mr *MockUserGroupUsecaseMockRecorder) DeleteByUserIDAndGroupID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserIDAndGroupID", reflect.TypeOf((*MockUserGroupUsecase)(nil).DeleteByUserIDAndGroupID), arg0, arg1)
}

// FindByUserID mocks base method.
func (m *MockUserGroupUsecase) FindByUserID(arg0 context.Context, arg1 *model.FindUserGroupsByUserIDPayload) (model.UserGroups, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", arg0, arg1)
	ret0, _ := ret[0].(model.UserGroups)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockUserGroupUsecaseMockRecorder) FindByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockUserGroupUsecase)(nil).FindByUserID), arg0, arg1)
}

// FindByUserIDAndGroupID mocks base method.
func (m *MockUserGroupUsecase) FindByUserIDAndGroupID(arg0 context.Context, arg1 *model.FindUserGroupPayload) (*model.UserGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserIDAndGroupID", arg0, arg1)
	ret0, _ := ret[0].(*model.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserIDAndGroupID indicates an expected call of FindByUserIDAndGroupID.
func (mr *MockUserGroupUsecaseMockRecorder) FindByUserIDAndGroupID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserIDAndGroupID", reflect.TypeOf((*MockUserGroupUsecase)(nil).FindByUserIDAndGroupID), arg0, arg1)
}

// InjectAuthUsecase mocks base method.
func (m *MockUserGroupUsecase) InjectAuthUsecase(arg0 model.AuthUsecase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectAuthUsecase", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectAuthUsecase indicates an expected call of InjectAuthUsecase.
func (mr *MockUserGroupUsecaseMockRecorder) InjectAuthUsecase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectAuthUsecase", reflect.TypeOf((*MockUserGroupUsecase)(nil).InjectAuthUsecase), arg0)
}

// InjectGroupRepo mocks base method.
func (m *MockUserGroupUsecase) InjectGroupRepo(arg0 model.GroupRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectGroupRepo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectGroupRepo indicates an expected call of InjectGroupRepo.
func (mr *MockUserGroupUsecaseMockRecorder) InjectGroupRepo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectGroupRepo", reflect.TypeOf((*MockUserGroupUsecase)(nil).InjectGroupRepo), arg0)
}

// InjectUserGroupRepo mocks base method.
func (m *MockUserGroupUsecase) InjectUserGroupRepo(arg0 model.UserGroupRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectUserGroupRepo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectUserGroupRepo indicates an expected call of InjectUserGroupRepo.
func (mr *MockUserGroupUsecaseMockRecorder) InjectUserGroupRepo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectUserGroupRepo", reflect.TypeOf((*MockUserGroupUsecase)(nil).InjectUserGroupRepo), arg0)
}

// InjectUserRepo mocks base method.
func (m *MockUserGroupUsecase) InjectUserRepo(arg0 model.UserRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectUserRepo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectUserRepo indicates an expected call of InjectUserRepo.
func (mr *MockUserGroupUsecaseMockRecorder) InjectUserRepo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectUserRepo", reflect.TypeOf((*MockUserGroupUsecase)(nil).InjectUserRepo), arg0)
}
